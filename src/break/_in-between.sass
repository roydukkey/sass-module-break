// Copyright (c) roydukkey. All rights reserved.
// Licensed under the MIT. See LICENSE file in the project root for full license information.
////
/// @author roydukkey
/// @group api
////

@use 'sass:meta'
@use 'sass-exception/src/exception/parameter'
@use 'in'
@use 'out'
@use '../internal'


///
/// Generates a media query rule for the given horizontal breakpoints which is equal and wider than the smaller, and equal and narrower than the larger.
///
/// @param {String} $first-name - The name of the smaller breakpoint at which the generated rule should break.
/// @param {String} $second-name - The name of the larger breakpoint at which the generated rule should break.
///
/// @throw No breakpoint exists by the name `#{$first-name|$second-name}`
///
	@overload between($first-name, $second-name)
///
/// Generates a media query rule for the given sizes which is equal and wider than the smaller, and equal and narrower than the larger.
///
/// @param {Number} $first-size - The smaller size at which the generated rule should break.
/// @param {Number} $second-size - The larger size at which the generated rule should break.
///
	@overload between($first-size, $second-size)
///
/// @return {String}
///
/// @throw `#{$first-breakpoint|$second-breakpoint}` is not a string or number.
/// @throw First breakpoint must be smaller than second breakpoint.
///
/// @access public
/// @require internal.to-string
/// @require internal.validate-breakpoint
/// @require internal.value
/// @require parameter.parameter
///
@function between($first-breakpoint, $second-breakpoint)
	$first-breakpoint: internal.validate-breakpoint('between', 'first-breakpoint', $first-breakpoint, 'min-width')

	@if meta.type-of($first-breakpoint) != 'map'
		@error $first-breakpoint

	$second-breakpoint: internal.validate-breakpoint('between', 'second-breakpoint', $second-breakpoint, 'max-width')

	@if meta.type-of($second-breakpoint) != 'map'
		@error $second-breakpoint

	@if internal.value($first-breakpoint) >= internal.value($second-breakpoint)
		@error parameter.parameter('First breakpoint must be smaller than second breakpoint', 'between', 'first-breakpoint', 'second-breakpoint')

	@return '#{internal.to-string($first-breakpoint)} and #{internal.to-string($second-breakpoint)}'


///
/// Applies a media query rule to the content for the given horizontal breakpoints which is equal and wider than the smaller, and equal and narrower than the larger.
///
/// @param {String} $first-name - The name of the smaller breakpoint at which the applied rule should break.
/// @param {String} $second-name - The name of the larger breakpoint at which the applied rule should break.
///
/// @throw No breakpoint exists by the name `#{$first-name|$second-name}`
///
	@overload between($first-name, $second-name)
///
/// Applies a media query rule to the content for the given sizes which is equal and wider than the smaller, and equal and narrower than the larger.
///
/// @param {Number} $first-size - The smaller size at which the applied rule should break.
/// @param {Number} $second-size - The larger size at which the applied rule should break.
///
	@overload between($first-size, $second-size)
///
/// @output Unless the breakpoint is the smallest or largest, makes the content apply to the given breakpoints.
///
/// @throw `#{$first-breakpoint|$second-breakpoint}` is not a string or number.
/// @throw First breakpoint must be smaller than second breakpoint.
///
/// @access public
/// @require in.down
/// @require internal.to-string
/// @require internal.validate-breakpoint
/// @require internal.value
/// @require out.up
///
@mixin between($first-breakpoint, $second-breakpoint)
	$first: internal.validate-breakpoint('between', 'first-breakpoint', $first-breakpoint, 'min-width', true)

	@if $first and meta.type-of($first) != 'map'
		// true:cannot-test
		@error $first

	$second: internal.validate-breakpoint('between', 'second-breakpoint', $second-breakpoint, 'max-width', true)

	@if $second

		@if meta.type-of($second) != 'map'
			// true:cannot-test
			@error $second

		@if $first == null
			@include in.down($second-breakpoint)
				@content

		@else

			@if internal.value($first) >= internal.value($second)
				// true:cannot-test
				@error parameter.parameter('First breakpoint must be smaller than second breakpoint', 'between', 'first-breakpoint', 'second-breakpoint')

			@media #{internal.to-string($first)} and #{internal.to-string($second)}
				@content

	@else
		@include out.up($first-breakpoint)
			@content
